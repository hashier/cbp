Hauptprogramm:                       Alexander
Parser:                              Chris
Symboltabelle:                       Jan
Constant Propagation:                Johannes
Inlining:                            Thorben
Abhängigkeitsanalyse:                Martin
Codeerzeugungs-Hilfsklassen:         Vincent
Assembler-Rahmenprogramm:            Hendrik
Benchmarking:                        David
Peephole-Optimizer:                  Stefan
Debugging Informationen:             Raimar
Mathematische Umwandlungen:          Matthias

Constraint Solving:                  Henning
 Nachdem Abhängigkeitsanalyse + Constant Propagation durchgelaufen sind, analysierst
 du die möglichen Werte von Variablen an bestimmten Punkten. Entgegen der
 Constant-Propagation hast du die Aufgabe, heraus zu finden, dass z.B. in
   a = 5
   a = a * 2
   if a % 2
 das if niemals zu true evaluierien kann. Sprich: Du verfolgst für alle
 Integer-Variablen den möglichen Wertebereich, und versuchst Muster zu finden.
 Konkret: Für jede Variable eine Bitmaske mit Bits, die gesetzt sein müssen,
 eine Bitmaske mit Bits die nicht gesetzt sein können, und jeweils ein Interval
 mit Minimum und Maximum.

Die Grammatik wird wie folgt aufgeteilt (Änderungen nur neue Nichtterminale für Henning):


file ::= ( type_decl | var_decl | func_decl )*                                     --Stefan

var_decl ::= 'var' IDENTIFIER ':' type ;                                           --Stefan

func_decl ::= 'func' abi IDENTIFIER func_args ':' type statement? ;                --Christopher
func_args ::= '(' ( IDENTIFIER ':' type )* ')' ;                                   --Christopher
abi ::= | 'abi_c' | 'abi_default' ;                                                --Christopher

type_decl ::= 'type' IDENTIFIER ':' type ;                                         --Jan
type ::= 'uint8' | 'int8' | 'uint16' | 'int16' | 'uint32' | 'int32'                --Jan
| 'float32' | 'float64'                                                            --Jan
| 'void'                                                                           --Jan
| 'struct' '{' struct_member* '}'                                                  --Alexander
| IDENTIFIER                                                                       --Hendrik
| '[]' type                                                                        --Hendrik
;

struct_member ::= var_decl ('@' INT_CONSTANT)? ;                                   --Alexander
statement ::= expr                                                                 --Martin
| 'local' var_decl                                                                 --Stefan
| 'if' expr statement ( 'else' statement )?                                        --David
| 'while' expr statement                                                           --David
| 'switch' expr (  'case' INT_CONSTANT statement )*                                --Henning
| 'for' IDENTIFIER '=' expr '..' expr ( 'by' expr )? statement                     --Torben
| '{' statement* '}'                                                               --Johannes
| 'return' expr                                                                    --Johannes
| 'return' 'void'                                                                  --Johannes
;

expr ::= expr_assign ;                                                             --Martin
expr_assign ::= expr_cast ( '=' expr )? ;                                          --Martin
expr_cast ::= ('as' type)? expr_comp ;                                             --Martin
expr_comp ::= expr_log ( ('==' | '!=' | '<=' | '>=' | '<' | '>') expr_log )* ;     --Matthias
expr_log ::= expr_bit2 ( ('||' | '&&' | '^^') expr_bit2 )* ;                       --Matthias
expr_bit2 ::= expr_bit ( ('<<' | '>>') expr_bit )* ;                               --Raimar
expr_bit ::= expr_add ( ('|' | '&' | '^') expr_add )* ;                            --Raimar
expr_add ::= expr_mul ( ('+' | '-') expr_mul )* ;                                  --Raimar
expr_mul ::= expr_ptr ( ('*' | '/' | '%') expr_ptr )* ;                            --Vincent
expr_ptr ::= expr_struc ( '$' )* ;                                                 --Alexander
expr_struc ::= expr_atom ( ( '.' IDENTIFIER | '[' expr ']' ) )* ;                  --Alexander
expr_atom ::= '(' expr ')'                                                         --Vincent
| INT_CONSTANT                                                                     --Vincent
| FLOAT_CONSTANT                                                                   --Vincent
| IDENTIFIER                                                                       --Vincent
| 'call' IDENTIFIER '(' expr* ')'                                                  --Christopher
;

IDENTIFIER ::= LETTER ( LETTER | DIGIT )* ;                                        -- Gehört zum Lexer vvvvvvvvvvvvvv

LETTER ::= 'a' .. 'z' | 'A' .. 'Z' | '_' ;
DIGIT ::= '0' .. '9' ;

INT_CONSTANT ::= '-'? DIGIT+ ;
FLOAT_CONSTANT ::= '-'? DIGIT+ '.' DIGIT+ ;

WHITESPACE  ::= ( '\t' | ' ' | '\n' | '\r' )+
LINE_COMMENT  ::= '#' ~('\n'|'\r')* '\r'? '\n'
