var v1:uint32
var v2:float32

type myuint32:uint32
var v3:myuint32

type myuint32array:[]uint32
var v4:myuint32array

type myuint32_2:myuint32

type mystruct1:struct
{ 
 var x:float32
 var y:float32
}

type mystruct2:struct
{
 var i:mystruct1
 var j:mystruct1
}
	
type  SDL_Surface: struct {
  var flags : uint32 @ 0
  var format : []void @ 4
  var w : uint32 @ 8
  var h : uint32 @ 12
  var pitch : uint16 @ 16
  var pixels : []uint32 @ 20
}

var screen : []SDL_Surface

func abi_c SDL_Init (flags:uint32) : uint32
func abi_c SDL_SetVideoMode (width:uint32 height:uint32 bpp:uint32 flags:uint32) : []SDL_Surface
func abi_c SDL_Flip (screen:[]SDL_Surface) : uint32
func abi_c SDL_LockSurface (screen:[]SDL_Surface) : uint32
func abi_c SDL_UnlockSurface (screen:[]SDL_Surface xx:uint32 yy:uint32 w:uint32 h:uint32) : uint32
func abi_c SDL_Init (flags:uint32) : uint32
func abi_c SDL_UpdateRect (screen:[]SDL_Surface) : uint32
	
func main():void
{
   call SDL_Init(0)

   screen = call SDL_SetVideoMode(800 600 32 0)

   call SDL_LockSurface(screen)

   local var x : uint32
   local var y : uint32
   local var i : uint32

   for y = 0 .. 600 by 1 
   {
      for x = 0 .. 800 by 2
      {
         screen[0].pixels[x + 800 * y] = 
            ((x | y + i) + 4 * i) + 
            256 * ((x + 3 * i & y) + 5 * i) +
            65536 * ((x - 4 * i ^ y - 2 * i) + 6 *i)
         call SDL_UnlockSurface(screen)
         call SDL_UpdateRect(screen 0 0 0 0)
      }
   }
   
   call SDL_Flip(screen)
}
